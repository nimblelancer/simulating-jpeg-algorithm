import streamlit as st
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
from utils.image_io import load_npy

def app():
    st.title("üîÑ JPEG Decoding Pipeline")
    st.write("Explore each step of the JPEG decoding process.")

    # Load d·ªØ li·ªáu decode
    inverse_zigzag_vectors = load_npy("decode_step_huffman_decode.npy", allow_pickle=True)
    dequantized_blocks = load_npy("decode_step_inverse_zigzag.npy")
    idct_blocks = load_npy("decode_step_dequantized.npy")
    blocks = load_npy("decode_step_idct.npy")

    # S·ªë block
    num_blocks = blocks.shape[0]
    block_height_idx = st.slider("Select Block Height Index", 0, blocks.shape[0] - 1, 0)
    block_width_idx = st.slider("Select Block Width Index", 0, blocks.shape[1]- 1, 0)
    block_idx = block_height_idx * blocks.shape[1] + block_width_idx

    tab1, tab2, tab3, tab4 = st.tabs([
        "üì§ Huffman Decoding",
        "üîÄ Inverse ZigZag",
        "üîÅ Dequantization",
        "üì• Inverse DCT"
    ])

    with tab1:
        st.subheader("üì§ Huffman Decoding")
        st.markdown("Gi·∫£i m√£ bitstream ƒë√£ n√©n s·ª≠ d·ª•ng b·∫£ng m√£ Huffman.")

        st.markdown("Vector sau khi gi·∫£i m√£ Huffman:")
        vector = inverse_zigzag_vectors[block_idx]
        dc = int(vector[0])
        ac = [(int(run), int(val)) for run, val in vector[1]]
        zigzag_vector = [dc, ac]
        st.code(f"{zigzag_vector}")

        st.markdown(f"- DC coefficient: Gi√° tr·ªã t·∫ßn s·ªë th·∫•p (s√°ng/t·ªëi c·ªßa block).")
        st.markdown(f"- (run, value): S·ªë l∆∞·ª£ng gi√° tr·ªã 0 tr∆∞·ªõc m·ªôt gi√° tr·ªã kh√°c 0, v√† gi√° tr·ªã ƒë√≥.")
        st.markdown(f"- (0, 0): D·∫•u hi·ªáu k·∫øt th√∫c block (EOB).")

    with tab2:
        st.subheader("üîÄ Inverse ZigZag")
        st.markdown("S·∫Øp x·∫øp l·∫°i vector 1 chi·ªÅu th√†nh ma tr·∫≠n 8x8.")
        
        matrix = dequantized_blocks[block_height_idx, block_width_idx, :, :]
        st.write("Matrix sau Inverse ZigZag:")

        fig = px.imshow(matrix, color_continuous_scale="gray")
        fig.update_layout(title=f"Inverse ZigZag Matrix - Block #{block_idx}")
        st.plotly_chart(fig, use_container_width=True)

    with tab3:
        st.subheader("üîÅ Dequantization")
        st.markdown("Kh√¥i ph·ª•c c√°c h·ªá s·ªë g·ªëc b·∫±ng c√°ch nh√¢n v·ªõi ma tr·∫≠n l∆∞·ª£ng t·ª≠ h√≥a.")

        matrix = idct_blocks[block_height_idx, block_width_idx, :, :]
        st.write("Matrix sau Dequantization:")

        fig = px.imshow(matrix, color_continuous_scale="gray")
        fig.update_layout(title=f"Dequantized Coefficients - Block #{block_idx}")
        st.plotly_chart(fig, use_container_width=True)

    with tab4:
        st.subheader("üì• Inverse DCT")
        st.markdown("Bi·∫øn ƒë·ªïi v·ªÅ mi·ªÅn kh√¥ng gian ƒë·ªÉ kh√¥i ph·ª•c ·∫£nh g·ªëc.")

        matrix = blocks[block_height_idx, block_width_idx, :, :]
        st.write("Block t√°i t·∫°o sau Inverse DCT:")

        fig = px.imshow(matrix, color_continuous_scale="gray")
        fig.update_layout(title=f"Reconstructed Block - Block #{block_idx}")
        st.plotly_chart(fig, use_container_width=True)

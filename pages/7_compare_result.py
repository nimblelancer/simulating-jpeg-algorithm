import streamlit as st
import numpy as np
from PIL import Image
import os

st.title("7Ô∏è‚É£ Compare Results")

# Dummy gi·∫£i m√£ ·∫£nh (·∫£nh cu·ªëi sau n√©n)
def get_decoded_image():
    # Tr·∫£ v·ªÅ ·∫£nh ƒëen tr·∫Øng gi·∫£ l·∫≠p v·ªõi k√≠ch th∆∞·ªõc nh·ªè
    return np.clip(np.random.randn(256, 256) * 30 + 128, 0, 255).astype(np.uint8)

def calculate_mse(img1, img2):
    return np.mean((img1 - img2) ** 2)

def calculate_psnr(mse, max_pixel=255.0):
    if mse == 0:
        return float("inf")
    return 20 * np.log10(max_pixel / np.sqrt(mse))

# Load ·∫£nh g·ªëc
try:
    original = Image.open("assets/images/test/original.png")
except FileNotFoundError:
    st.warning("Vui l√≤ng upload ·∫£nh ·ªü b∆∞·ªõc 1.")
    st.stop()

original_array = np.array(original)

# Ki·ªÉm tra ·∫£nh g·ªëc l√† ·∫£nh m√†u (RGB)
if len(original_array.shape) == 3 and original_array.shape[2] == 3:
    # N·∫øu ·∫£nh g·ªëc l√† ·∫£nh m√†u, chuy·ªÉn ·∫£nh gi·∫£i m√£ th√†nh ·∫£nh m√†u c√≥ k√≠ch th∆∞·ªõc ƒë√∫ng
    decoded_array = get_decoded_image()
    decoded_image_resized = np.array(Image.fromarray(decoded_array).resize((original.width, original.height)))
    decoded_array_resized = np.repeat(decoded_image_resized[:, :, np.newaxis], 3, axis=2)  # Chuy·ªÉn th√†nh ·∫£nh m√†u 3 k√™nh
else:
    # N·∫øu ·∫£nh g·ªëc l√† ·∫£nh ƒëen tr·∫Øng, ch·ªâ c·∫ßn resize ·∫£nh gi·∫£i m√£
    decoded_array = get_decoded_image()
    decoded_array_resized = np.array(Image.fromarray(decoded_array).resize(original.size))

decoded_image = Image.fromarray(decoded_array_resized)

# T√≠nh to√°n MSE & PSNR
mse = calculate_mse(original_array, decoded_array_resized)
psnr = calculate_psnr(mse)

# Dummy size file (gi·∫£ l·∫≠p)
original_size = os.path.getsize("assets/images/test/original.png") / 1024  # KB
compressed_size = original_size * 0.35  # gi·∫£ l·∫≠p 65% n√©n

# Hi·ªÉn th·ªã ·∫£nh
col1, col2 = st.columns(2)
with col1:
    st.image(original, caption="·∫¢nh g·ªëc", use_container_width=True)
with col2:
    st.image(decoded_image, caption="·∫¢nh sau gi·∫£i n√©n", use_container_width=True)

st.markdown("---")

# Th√¥ng s·ªë ƒë√°nh gi√°
st.subheader("üìà K·∫øt qu·∫£ so s√°nh")
st.write(f"**PSNR:** {psnr:.2f} dB")
st.write(f"**MSE:** {mse:.2f}")
st.write(f"**K√≠ch th∆∞·ªõc ·∫£nh g·ªëc:** {original_size:.2f} KB")
st.write(f"**K√≠ch th∆∞·ªõc ·∫£nh n√©n:** {compressed_size:.2f} KB (gi·∫£ l·∫≠p)")

import streamlit as st
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
from utils.image_io import load_npy, build_huffman_result
import matplotlib.pyplot as plt

def app():
    st.title("üõ† JPEG Encoding Pipeline")
    st.write("Explore each step of the JPEG encoding process.")

    blocks = load_npy("encode_step_blocks.npy")
    dct_blocks = load_npy("encode_step_dct.npy")       # shape (N, 8, 8)
    quantized_blocks = load_npy("encode_step_quantized.npy")
    zigzag_vectors = load_npy("encode_step_rle.npy", allow_pickle=True)
    encoded_dc_original = st.session_state['encoded_dc_original']
    dc_codes = st.session_state['dc_codes']
    ac_codes = st.session_state['ac_codes']
    huffman_result = build_huffman_result(dc_codes, ac_codes)

    # Block slider
    num_blocks = blocks.shape[0]
    block_height_idx = st.slider("Select Block Height Index", 0, blocks.shape[0]-1, 0)
    block_width_idx = st.slider("Select Block Width Index", 0, blocks.shape[1]-1, 0)
    block_idx = block_height_idx * blocks.shape[1] + block_width_idx

    # Tabs layout
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üß± Block Splitting", 
        "üìê DCT Transform", 
        "üéöÔ∏è Quantization", 
        "üß© ZigZag Scan", 
        "üßÆ Huffman Encoding"
    ])

    with tab1:
        st.subheader("üß± Block Splitting (8x8)")
        st.markdown("·∫¢nh ƒë∆∞·ª£c chia th√†nh c√°c block 8x8 ƒë·ªÉ x·ª≠ l√Ω t·ª´ng ph·∫ßn nh·ªè.")
        fig = px.imshow(blocks[block_height_idx, block_width_idx, :, :], color_continuous_scale="gray")
        fig.update_layout(title=f"Block #{block_idx} (Pixel Values)")
        st.plotly_chart(fig, use_container_width=True)

    with tab2:
        st.subheader("üìê DCT Transform")
        st.markdown("Bi·∫øn ƒë·ªïi m·ªói block 8x8 sang mi·ªÅn t·∫ßn s·ªë b·∫±ng Discrete Cosine Transform (DCT).")
        fig = px.imshow(dct_blocks[block_height_idx, block_width_idx, :, :], color_continuous_scale="gray")
        fig.update_layout(title=f"DCT Coefficients of Block #{block_idx}")
        st.plotly_chart(fig, use_container_width=True)

    with tab3:
        st.subheader("üéöÔ∏è Quantization")
        st.markdown("L∆∞·ª£ng t·ª≠ h√≥a DCT coefficients ƒë·ªÉ lo·∫°i b·ªè t·∫ßn s·ªë cao (gi·∫£m chi ti·∫øt √≠t quan tr·ªçng).")
        col1, col2 = st.columns(2)
        with col1:
            st.write("Before Quantization (DCT)")
            fig1 = px.imshow(dct_blocks[block_height_idx, block_width_idx, :, :], color_continuous_scale="gray")
            fig1.update_layout(title=f"DCT Block #{block_idx}")
            st.plotly_chart(fig1, use_container_width=True)
        with col2:
            st.write("After Quantization")
            fig2 = px.imshow(quantized_blocks[block_height_idx, block_width_idx, :, :], color_continuous_scale="gray")
            fig2.update_layout(title=f"Quantized Block #{block_idx}")
            st.plotly_chart(fig2, use_container_width=True)

    with tab4:
        st.subheader("üß© ZigZag Scan")
        st.markdown("Chuy·ªÉn ma tr·∫≠n 8x8 th√†nh vector theo th·ª© t·ª± ZigZag ƒë·ªÉ gom c√°c s·ªë 0 l·∫°i g·∫ßn nhau.")
        st.write("Quantized block (input for ZigZag):")
        st.code(quantized_blocks[block_height_idx, block_width_idx, :, :])
        # V·∫Ω ma tr·∫≠n v·ªõi ƒë∆∞·ªùng ƒëi ZigZag
        zigzag_indices = np.array([
            0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5,
            12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28,
            35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51,
            58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63
        ])
        
        # Chuy·ªÉn ch·ªâ s·ªë tuy·∫øn t√≠nh th√†nh t·ªça ƒë·ªô (i, j)
        zigzag_coords = [(idx // 8, idx % 8) for idx in zigzag_indices]
        
        # L·∫•y ma tr·∫≠n quantized
        matrix = quantized_blocks[block_height_idx, block_width_idx, :, :]
        
        # V·∫Ω ma tr·∫≠n v√† ƒë∆∞·ªùng ƒëi ZigZag
        fig, ax = plt.subplots(figsize=(6, 6))
        ax.matshow(matrix, cmap='coolwarm')  # Heatmap c·ªßa ma tr·∫≠n
        
        # Th√™m gi√° tr·ªã v√†o t·ª´ng √¥
        for i in range(8):
            for j in range(8):
                ax.text(j, i, f'{matrix[i, j]}', ha='center', va='center', color='black')
        
        # V·∫Ω ƒë∆∞·ªùng ƒëi ZigZag
        x_coords = [coord[1] + 0.5 for coord in zigzag_coords]  # T·ªça ƒë·ªô x (c·ªôt)
        y_coords = [coord[0] + 0.5 for coord in zigzag_coords]  # T·ªça ƒë·ªô y (h√†ng)
        ax.plot(x_coords, y_coords, 'k--', linewidth=1, alpha=0.7)  # ƒê∆∞·ªùng n√©t ƒë·ª©t m√†u ƒëen
        
        # ·∫®n c√°c tr·ª•c ƒë·ªÉ h√¨nh ·∫£nh g·ªçn g√†ng
        ax.set_xticks(np.arange(8))
        ax.set_yticks(np.arange(8))
        ax.set_xticklabels(np.arange(8))
        ax.set_yticklabels(np.arange(8))
        ax.set_title("ZigZag Scan Path")
        
        # Hi·ªÉn th·ªã h√¨nh ·∫£nh trong Streamlit
        st.pyplot(fig)
        st.markdown("Vector ch·ª©a: [DC coefficient, danh s√°ch c√°c c·∫∑p (run, value) cho AC coefficients].")
        st.markdown(f"- DC coefficient: Gi√° tr·ªã t·∫ßn s·ªë th·∫•p (s√°ng/t·ªëi c·ªßa block).")
        st.markdown(f"- (run, value): S·ªë l∆∞·ª£ng gi√° tr·ªã 0 tr∆∞·ªõc m·ªôt gi√° tr·ªã kh√°c 0, v√† gi√° tr·ªã ƒë√≥.")
        st.markdown(f"- (0, 0): D·∫•u hi·ªáu k·∫øt th√∫c block (EOB).")
        st.write(f"ZigZag vector for block #{block_idx}:")
        zigzag_vector = zigzag_vectors[block_idx].tolist()  # Chuy·ªÉn DC v√† danh s√°ch AC sang list
        dc_original  = encoded_dc_original[block_idx]  # DC coefficient
        zigzag_vector = [int(dc_original), [(int(run), int(value)) for run, value in zigzag_vector[1]]]
        st.code(f"{zigzag_vector}")

    with tab5:
        st.subheader("üßÆ Huffman Encoding")
        st.markdown("N√©n vector b·∫±ng m√£ h√≥a Huffman d·ª±a tr√™n t·∫ßn su·∫•t xu·∫•t hi·ªán.")

        # Huffman codes l√† dict {'symbol': 'code'}
        st.write("**Sample Huffman Codes:**")
        sample_codes = dict(list(huffman_result.items())[:10])  # Show 10 ƒë·∫ßu ti√™n
        st.json(sample_codes)

        st.markdown("B·∫°n c√≥ th·ªÉ t·∫£i to√†n b·ªô m√£ Huffman ƒë·ªÉ ph√¢n t√≠ch th√™m.")
        st.download_button("üì• T·∫£i to√†n b·ªô Huffman codes", data=str(huffman_result), file_name="huffman_codes.txt")